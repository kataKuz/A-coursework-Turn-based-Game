package gameClasses;

import java.util.List;
import java.util.Map;

/**
 * Представляет игрока в игре. Игрок обладает ресурсами (рис, вода), юнитами, домами и контролирует клетки на игровой карте.
 */
public interface PlayerActions {
    /**
     * Добавляет указанное количество воды к запасам игрока.
     * @param amount Количество воды, которое нужно добавить.
     */
    void collectWater(double amount);
    /**
     * Позволяет игроку полить рис на указанной клетке.
     * Проверяет, находится ли клетка в пределах карты, контролируется ли она игроком и достаточно ли у игрока воды.
     * Если все условия выполнены, клетка поливается, и количество воды у игрока уменьшается на 5 единиц.
     * @param x Координата x клетки.
     * @param y Координата y клетки.
     * @param gameMap Игровая карта.
     * @return Сообщение об успешном поливе или ошибке.
     */
    String waterRice(int x, int y, GameMap gameMap);
    /**
     * Попытка захвата территории игроком.
     * Проверяет, находится ли клетка в пределах карты и может ли быть захвачена игроком.
     * Если захват успешен, количество контролируемых клеток игрока увеличивается.
     * @param x Координата x клетки.
     * @param y Координата y клетки.
     * @param gameMap Игровая карта.
     * @return Сообщение об успешном захвате или ошибке.
     */
    String claimTerritory(int x, int y, GameMap gameMap);
    /**
     * Попытка постройки дома игроком на указанной клетке.
     * Проверяет, находится ли клетка в пределах карты, контролируется ли она игроком и есть ли на ней уже дом.
     * Если все условия выполнены и достаточно ресурсов (рис, вода, юниты), дом строится, и ресурсы игрока уменьшаются.
     * @param x Координата x клетки.
     * @param y Координата y клетки.
     * @param gameMap Игровая карта.
     * @return Сообщение об успешной постройке дома или ошибке.
     */
    String buildHouse(int x, int y, GameMap gameMap);
    /**
     * Сбор урожая риса с контролируемых игроком клеток.
     * Игрок собирает весь рис с каждой контролируемой клетки, оставляя 1 единицу риса меньше на клетке.
     * @param gameMap Игровая карта.
     */
    void collectRice(GameMap gameMap);
    /**
     * Возвращает количество юнитов игрока.
     * @return Количество юнитов.
     */
    int getUnits();
    /**
     * Возвращает количество риса у игрока.
     * @return Количество риса.
     */
    double getRice();
    /**
     * Возвращает количество воды у игрока.
     * @return Количество воды.
     */
    double getWater();
    /**
     * Возвращает количество домов, построенных игроком.
     * @return Количество домов.
     */
    int getHouses();
    /**
     * Устанавливает количество юнитов игрока.
     * @param units Новое количество юнитов.
     */
    void setUnits(int units);
    /**
     * Расходует рис на питание (уменьшает количество риса).
     * Проверяет, что количество риса не становится отрицательным.
     * @param amount Количество единиц потребления риса.
     */
    void eatRice(int amount);
    /**
     * Возвращает количество контролируемых игроком клеток.
     * @return Количество контролируемых клеток.
     */
    int controlledTiles();
    /**
     * Сохраняет текущие ресурсы игрока в список ресурсов.
     * Создает новый словарь ресурсов для текущего дня и добавляет его в список ресурсов игрока.
     */
    void saveResources();
    /**
     * Возвращает список ресурсов игрока за все дни игры.
     * @return Список словарей, где каждая карта содержит ресурсы за один день.
     */
    List<Map<String, Double>> getResources();
    /**
     * Попытка захвата территории ИИ-игроком в радиусе поиска.
     * ИИ использует поиск в ширину (BFS) для поиска ближайшего незанятого тайла, который можно захватить.
     * @param player Игрок ИИ.
     * @param searchRadius Радиус поиска в клетках.
     * @param gameMap Игровая карта.
     * @return Сообщение об успешном захвате или ошибке.
     */
    String aiPlayerClaimTerritory(Player player, int searchRadius, GameMap gameMap);
    /**
     * Реализует другие действия ИИ-игрока, если захват территории невозможен.
     * ИИ проверяет наличие ресурсов и выполняет полив риса или строительство дома, если это возможно.
     * Если других действий нет, ИИ собирает воду.
     * @param player Игрок ИИ.
     * @param gameMap Игровая карта.
     * @return Сообщение о действии ИИ.
     */
    String aiPlayerOtherOptions(Player player, GameMap gameMap);
}
